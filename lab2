
Problem 1:System call tracing
System call tracing需要对系统调用进行跟踪，并且要求能够继承给子进程，因此需要将相关的信息记录到存储进程相关信息的数据结构中。
void
syscall(void)
{
  int num;
  struct proc *p = myproc();

  num = p->trapframe->a7;
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    p->trapframe->a0 = syscalls[num]();
    if (!!(1 << num  & p->tracemask)) {
        printf("%d: syscall %s -> %d\n", p->pid, syscall_name[num], p->trapframe->a0);
    }
  } else {
    printf("%d %s: unknown sys call %d\n",
            p->pid, p->name, num);
    p->trapframe->a0 = -1;
  }
}
Problem 2:Sysinfo
Sysinfo涉及到了系统调用的传参和返回值，要点在于意识到系统调用和普通函数调用所处的空间不同，系统调用时会跳转到内核空间，因此传参和返回值时需要从特定寄存器取值和存入特定寄存器，涉及到地址取值时候需要将虚拟进程地址利用Pagetable转换为物理地址再使用。
Sysinfo还需要返回剩余的物理空间，在xv6的内核中存在一个物理空间分配器，物理地址空间为由一个链表进行管理，因此在查询剩余空间时候可以利用遍历链表计算。
uint64
kfreemem(void)
{
    uint64 size = 0;
    struct run *r;
    acquire(&kmem.lock);

    for(r = kmem.freelist ; r ; r = r->next)
        size += PGSIZE;
    release(&kmem.lock);
    return size;
}

uint64
nproc(void)
{
    uint64 n = 0;
    struct proc *p;
    for(p = proc;p < &proc[NPROC]; p++) {
        if (p->state != UNUSED)
            n++;
    }
    return n;
}


uint64
sys_sysinfo(void)
{
    struct sysinfo info;
    struct proc *p = myproc();
    uint64 pinfo;

    if (argaddr(0, &pinfo) < 0)
        return -1;

    info.freemem = kfreemem();
    info.nproc = nproc();


    if (copyout(p->pagetable, pinfo, (char *)&info, sizeof(info)) < 0)
        return -1;
    return 0;
}
